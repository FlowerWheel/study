/* include myunp.h */
/* Our own header.  Tabs are set for 4 spaces, not 8 */

#ifndef	__myunp_h
#define	__myunp_h

//#include	"../config.h"	/* configuration options for current OS */
							/* "../config.h" is generated by configure */

/* If anything changes in the following list of #includes, must change
   acsite.m4 also, for configure's tests. */

#include	<sys/types.h>	/* basic system data types */
#include	<sys/socket.h>	/* basic socket definitions */
#if TIME_WITH_SYS_TIME
#include	<sys/time.h>	/* timeval{} for select() */
#include	<time.h>		/* timespec{} for pselect() */
#else
#if HAVE_SYS_TIME_H
#include	<sys/time.h>	/* includes <time.h> unsafely */
#else
#include	<time.h>		/* old system? */
#endif
#endif
#include	<netinet/in.h>	/* sockaddr_in{} and other Internet defns */
#include	<arpa/inet.h>	/* inet(3) functions */
#include	<errno.h>
#include	<fcntl.h>		/* for nonblocking */
#include	<netdb.h>
#include	<signal.h>
#include	<stdio.h>
#include	<stdlib.h>
#include	<string.h>
#include	<sys/stat.h>	/* for S_xxx file mode constants */
#include	<sys/uio.h>		/* for iovec{} and readv/writev */
#include	<unistd.h>
#include	<sys/wait.h>
#include	<sys/un.h>		/* for Unix domain sockets */

#ifdef	HAVE_SYS_SELECT_H
# include	<sys/select.h>	/* for convenience */
#endif

#ifdef	HAVE_SYS_SYSCTL_H
#ifdef	HAVE_SYS_PARAM_H
# include	<sys/param.h>	/* OpenBSD prereq for sysctl.h */
#endif
# include	<sys/sysctl.h>
#endif

#ifdef	HAVE_POLL_H
# include	<poll.h>		/* for convenience */
#endif

#ifdef	HAVE_SYS_EVENT_H
# include	<sys/event.h>	/* for kqueue */
#endif

#ifdef	HAVE_STRINGS_H
# include	<strings.h>		/* for convenience */
#endif

/* Three headers are normally needed for socket/file ioctl's:
 * <sys/ioctl.h>, <sys/filio.h>, and <sys/sockio.h>.
 */
#ifdef	HAVE_SYS_IOCTL_H
# include	<sys/ioctl.h>
#endif
#ifdef	HAVE_SYS_FILIO_H
# include	<sys/filio.h>
#endif
#ifdef	HAVE_SYS_SOCKIO_H
# include	<sys/sockio.h>
#endif

#ifdef	HAVE_PTHREAD_H
# include	<pthread.h>
#endif

#ifdef HAVE_NET_IF_DL_H
# include	<net/if_dl.h>
#endif

#ifdef HAVE_NETINET_SCTP_H
#include	<netinet/sctp.h>
#endif

#define MAXLINE		1024
#define LISTENQ		1024
#define NDG	  2000
#define	DGLEN 1400

#define UNIXSTR_PATH	/tmp/unix.str


#define	max(a, b) ((a >= b) ? a : b)

/*
 * the system socket call warp in warpsock.c
 */
int		Socket(int family, int type, int protocol);
void	Listen(int fd, int backlog);
void	Connect(int sockfd, const struct sockaddr *servaddr, socklen_t addrlen);
void	Bind(int sockfd, const struct sockaddr *localaddr, socklen_t addrlen);
int		Accept(int listenfd, struct sockaddr *cliaddr, socklen_t *addrlen);
ssize_t Recv(int sockfd, void *buff, size_t len, int flags);
ssize_t Send(int sockfd, void *buff, size_t len, int flags);
ssize_t Recvfrom(int sockfd, void *buff, ssize_t nbytes, int flags, struct sockaddr *from, socklen_t *addrlen);
ssize_t Sendto(int sockfd, const void *buff, ssize_t nbytes, int flags, struct sockaddr *from, socklen_t addrlen);

void	Setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
void	Getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen);
//int Select(int nfds,  fd_set *readfds,  fd_set *writefds, fd_set *exceptfds,  struct timeval *timeout);
void	Socketpair(int domain, int type, int protocol, int sv[2]);
int		Sockatmask(int fd);
	
// some func for SOCKET func unse DNS
struct  addrinfo *host_serv(const char *hostname, const char *service, int family, int socktype);
int		tcp_connect(const char *hostname, const char *service);
int		tcp_listen(const char *hostname, const char *service, socklen_t *addrlenp);
int		udp_server(const char *hostname, const char *service, socklen_t *addrlenp);
int		udp_client(const char *hostname, const char *service, struct sockaddr *saptr, socklen_t *addrlenp);
int		udp_connect(const char *hostname, const char *service);
/*
#define Host_serv(const char *hostname, const char *service, int family, int socktype) \
			Host_serv(const char *hostname, const char *service, int family, int socktype)
#define		tcp_connect(const char *hostname, const char *service);
#define		tcp_listen(const char *hostname, const char *service, socklen_t *addrlenp);
#define		udp_server(const char *hostname, const char *service, socklen_t *addrlenp);
#define		udp_client(const char *hostname, const char *service, struct sockaddr *saptr, socklen_t *addrlenp);
#define		udp_connect(const char *hostname, const char *service);
*/

// the file IO func system call define for the func in warpsysio.c
//int		Ioctl(int d, int request, ...);
void	Open();
void	Close(int fd);
ssize_t Read(int fd, void *buf, size_t count);
void	Write(int fd, void *buf, size_t count);
ssize_t readn(int fd, void *vptr, size_t n);
ssize_t writen(int fd, const void *vptr, size_t n);
ssize_t readline(int fd, void *vptr, size_t linelen);
ssize_t readline1(int fd, void *vptr, size_t linelen);

// the stdio func system call define for the func in warpstdio.c
//char *Fgets(char *restrict buf, int n, FILE *restrict fp);
//char *Fputs(const char *restrict str, FILE *restrict fp);

// some socket dgram func define
void	dg_echo(int sockfd, struct sockaddr *PtrCliAddr, socklen_t clilen);
void	dg_echoloop1(int sockfd, struct sockaddr *PtrCliAddr, socklen_t clilen);
void	dg_echoaddr(int sockfd, struct sockaddr* PtrCliAddr, socklen_t clilen);
void	dg_cli(FILE *fp, int sockfd, struct sockaddr * PtrServAddr, socklen_t addrlen);
void	dg_cliaddr(FILE *fp, int sockfd, struct sockaddr *PtrServAddr, socklen_t addrlen);
void	dg_cliaddrconnect(FILE *fp, int sockfd, struct sockaddr *PtrServAddr, socklen_t addrlen);
void	dg_cliloop1(FILE *fp, int sockfd, struct sockaddr *PtrServAddr, socklen_t addrlen);
void	dg_cliloop2(FILE *fp, int sockfd, struct sockaddr *PtrServAddr, socklen_t addrlen);

// some socket stream func define
void	str_echo(int fd);
void	sig_chld(int signo);
void	str_cli(FILE *fp, int  sockfd);
void	str_cliselect(FILE *fp, int  sockfd);

// some func for the IP address deal 
char	*sock_ntop(const struct sockaddr *sa, socklen_t salen);

// procmanage 
pid_t	Fork();
void	Waitpid(pid_t pid, int *status, int options);

// sig_handler 
typedef void (*sighandler_t)(int);
void	Signal(int signum, sighandler_t sighandler);

// the memery alloc and free func warp in warpmem.c
void	*Malloc(size_t size);
void	Free();
void	*Calloc(size_t nmemb, size_t size);
void	*Realloc(void *ptr, size_t size);

// switch a process to a daemon process
int		daemon_init(const char *pname, int facility);

// some error handler func define
void	err_dump(const char *, ...);
void	err_msg(const char *, ...);
void	err_quit(const char *, ...);
void	err_ret(const char *, ...);
void	err_sys(const char *, ...);

#endif
